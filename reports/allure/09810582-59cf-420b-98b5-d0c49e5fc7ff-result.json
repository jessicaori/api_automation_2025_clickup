{"name": "Test End-to-End CRUD Group", "status": "failed", "statusDetails": {"message": "AssertionError: Expected status code 200, but got 500", "trace": "self = <src.api.groups.test_groups.TestGroups object at 0x000001E3F0386C60>, log_test_name = None\n\n    @pytest.mark.acceptance\n    @allure.title(\"Test End-to-End CRUD Group\")\n    @allure.tag('end-to-end')\n    @allure.label(\"owner\", \"jessica.orihuela\")\n    def test_crud_group(self, log_test_name):\n        \"\"\"\n        Method tp perform end-to-end CRUD operations on a group.\n    \n        Args:\n            log_test_name (Fixture): Logs the name of the test being executed.\n        \"\"\"\n        LOGGER.info(\"Creating group with ID:\")\n        # Call Endpoint\n        # Body\n        body = {\n            \"name\": f\"New User Group - {self.faker.company()}\"\n        }\n        # Call Endpoint\n        response = self.rest_client.send_request(\n            method='POST',\n            url=f\"{base_url}/team/{team_id}/group\",\n            headers=headers,\n            data=body\n        )\n        LOGGER.debug(\"RESPONSE: %s\", json.dumps(response[\"body\"], indent=4))\n        LOGGER.debug(\"STATUS CODE: %s\", response[\"status_code\"])\n        group_id = response[\"body\"].get('id')\n    \n        LOGGER.info(\"Getting group with ID: %s\")\n        # Call Endpoint\n        response = self.rest_client.send_request(\n            method='GET',\n            url=f\"{base_url}/group?team_id={team_id}&group_ids={group_id}\",\n            headers=headers\n        )\n        LOGGER.debug(\"RESPONSE: %s\", json.dumps(response[\"body\"], indent=4))\n        LOGGER.debug(\"STATUS CODE: %s\", response[\"status_code\"])\n    \n        LOGGER.info(\"Updating group with ID with data\")\n        # Call Endpoint\n        response = self.rest_client.send_request(\n            method='PUT',\n            url=f\"{base_url}/group/{group_id}\",\n            headers=headers,\n            data={\"name\":\"Updated Group Name\"}\n        )\n        LOGGER.debug(\"RESPONSE: %s\", json.dumps(response[\"body\"], indent=4))\n        LOGGER.debug(\"STATUS CODE: %s\", response[\"status_code\"])\n    \n        LOGGER.info(\"Deleting group with ID: %s\")\n        # Call Endpoint\n        response = self.rest_client.send_request(\n            method='DELETE',\n            url=f\"{base_url}/group/{group_id}\",\n            headers=headers\n        )\n        LOGGER.debug(\"RESPONSE: %s\", json.dumps(response[\"body\"], indent=4))\n        LOGGER.debug(\"STATUS CODE: %s\", response[\"status_code\"])\n        # Assertion\n>       self.validate_response.validate_response(response, \"delete_group\")\n\nsrc\\api\\groups\\test_groups.py:319: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nhelper\\validate_response.py:15: in validate_response\n    self.validate_value(actual_response['status_code'], expected_response[\"status_code\"], 'status_code')\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <helper.validate_response.ValidateResponse object at 0x000001E3F02BE840>, actual_value = 500, expected_value = 200, key_compare = 'status_code'\n\n    def validate_value(self, actual_value, expected_value, key_compare):\n        if key_compare == 'status_code':\n>           assert actual_value == expected_value, f\"Expected status code {expected_value}, but got {actual_value}\"\nE           AssertionError: Expected status code 200, but got 500\n\nhelper\\validate_response.py:20: AssertionError"}, "description": "\n        Method tp perform end-to-end CRUD operations on a group.\n        \n        Args:\n            log_test_name (Fixture): Logs the name of the test being executed.\n        ", "attachments": [{"name": "stderr", "source": "de15041d-8aac-4948-a851-36c8cc4737a6-attachment.txt", "type": "text/plain"}], "start": 1751318496068, "stop": 1751318498965, "uuid": "1744bcb1-13d3-4c9e-9359-d74433890450", "historyId": "7c0c4ad1dfcc462e122b0e36de0f52f7", "testCaseId": "7c0c4ad1dfcc462e122b0e36de0f52f7", "fullName": "src.api.groups.test_groups.TestGroups#test_crud_group", "labels": [{"name": "tag", "value": "end-to-end"}, {"name": "owner", "value": "jessica.orihuela"}, {"name": "tag", "value": "acceptance"}, {"name": "parentSuite", "value": "src.api.groups"}, {"name": "suite", "value": "test_groups"}, {"name": "subSuite", "value": "TestGroups"}, {"name": "host", "value": "JORIHUELAR-NH01"}, {"name": "thread", "value": "9744-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "src.api.groups.test_groups"}]}